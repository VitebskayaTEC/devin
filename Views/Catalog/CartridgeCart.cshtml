@model int

@using (var db = new DevinContext())
{
    var cartridge = db.Cartridges.FirstOrDefault(x => x.Id == Model);
    if (cartridge == null)
    {
        <div class="cart__header">
            <div></div>
            <div class="cart__closeButton" title="Закрыть карточку" onclick="Cart.close()">
                <i class="icon ic-clear icon_white icon_no-hover"></i>
            </div>
        </div>
        <div class="cart__body">Нет данных по данному идентификатору</div>
        return;
    }

    <div class="cart__header">
        <div>@cartridge.Name</div>
        <div class="cart__closeButton" title="Закрыть карточку" onclick="Cart.close()">
            <i class="icon ic-clear icon_white icon_no-hover"></i>
        </div>
    </div>

    var storages = db.Storages
        .Where(x => x.CartridgeId == Model)
        .OrderBy(x => x.Inventory)
            .ThenBy(x => x.Name)
        .ToList();

    float baseValue = 24.5F;

    float calculateCost = storages
        .Select(x => x.Cost == 0
            ? baseValue
            : x.Account.Contains("10.5.1") 
                ? (x.Cost * 1.2F) 
                : (x.Cost * 2.4F))
        .DefaultIfEmpty(0)
        .Average();

    <div class="cart__body">

        <table id="form">
            <tr>
                <td>Наименование</td>
                <td><input class="cart__field" name="Name" value="@cartridge.Name" placeholder="Наименование картриджа" /></td>
            </tr>
            <tr>
                <td>Описание</td>
                <td><textarea class="cart__field" name="Description">@cartridge.Description</textarea></td>
            </tr>
            <tr>
                <td>Типовая стоимость</td>
                <td>
                    <input class="cart__field" type="number" min="0" name="Cost" style="width: 100px;" />
                    @(storages.Count() > 0 ? ("Вычисленная: " + calculateCost.ToString("0.00") + "р.") : "")
                </td>
            </tr>
            <tr>
                <td>Тип</td>
                <td>
                    <select class="cart__field" name="Type">
                        @{ 
                            var types = db._CartridgeTypes
                                .Where(x => x.Type == "type")
                                .OrderBy(x => x.Name)
                                .ToList();

                            foreach (var type in types)
                            {
                                <option value="@type.Id" @(type.Id == cartridge.Type ? "selected" : "")>@type.Name</option>
                            }
                        }
                    </select>
                </td>
            </tr>
            <tr>
                <td>Цвет</td>
                <td>
                    <select class="cart__field" name="Color">
                        @{
                            var colors = db._CartridgeTypes
                                .Where(x => x.Type == "color")
                                .OrderBy(x => x.Name)
                                .ToList();

                            foreach (var color in colors)
                            {
                                <option value="@color.Id" @(color.Id == cartridge.Color ? "selected" : "")>@color.Name</option>
                            }
                        }
                    </select>
                </td>
            </tr>
        </table>

        <table>
            <tr>
                <td colspan="2">
                    <br /><b class="cart__caption">Связи с типовыми принтерами:</b>
                </td>
            </tr>
            @{
                var compared = db.Printers
                    .Where(p => db._PrinterCartridge
                        .Where(x => x.CartridgeId == Model)
                        .Select(x => x.PrinterId)
                        .Contains(p.Id))
                    .ToList();

                if (compared.Count() == 0)
                {
                    <tr>
                        <td colspan="2">Не установлено ни одной связи</td>
                    </tr>
                }

                foreach (var printer in compared)
                {
                    <tr>
                        <td>
                            <a class="cart__link" href="##prn@(printer.Id)">@printer.Name</a>
                        </td>
                        <td width="30px">
                            <button class="cart__button" onclick="Catalog.remove({ CartridgeId: @cartridge.Id, PrinterId: @printer.Id  })">
                                <div class="icon ic-clear"></div>
                            </button>
                        </td>
                    </tr>
                }
            }
            <tr>
                <td>
                    <select class="cart__field" id="new-compare">
                        <option value="0">?</option>
                        @{
                            var notCompared = db.Printers
                                .Where(p => !compared.Select(x => x.Id).Contains(p.Id))
                                .ToList();

                            foreach (var printer in notCompared)
                            {
                                <option value="@printer.Id">@printer.Name</option>
                            }
                        }
                    </select>
                </td>
                <td width="30px">
                    <button class="cart__button" onclick="Catalog.add({ CartridgeId: @cartridge.Id, PrinterId: document.getElementById('new-compare').value })">
                        <div class="icon ic-add"></div>
                    </button>
                </td>
            </tr>
        </table>

        <br /><b class="cart__caption">Позиции со склада, связанные с этим картриджем:</b>
        <div class="catalogLinks">
            @foreach (var storage in storages.Where(x => x.Nstorage > 0))
            {
                <div>
                    <a class="cart__link" href="##storage@(storage.Id)"><b>@storage.Inventory</b> @storage.Name</a> @storage.Nstorage шт.
                </div>
            }
            @if (storages.Count() == 0)
            {
                @: не найдено
            }
        </div>
    </div>
    
    <div class="cart__menu">
        <button class="cart__button" onclick="Catalog.update()">Сохранить</button>
        <button class="cart__button" onclick="Catalog.del()">Удалить</button>
        <button class="cart__button" onclick="Cart.close()">Закрыть</button>
    </div>
}