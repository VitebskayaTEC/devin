@using (var conn = Database.Connection())
{
    string id = Request.QueryString.Get("id");
    string search = Request.QueryString.Get("search");
    string where = string.IsNullOrEmpty(search)
        ? "" : $"WHERE Devices.Name LIKE '%{search}%' OR Devices.Description LIKE '%{search}%' OR Devices.Inventory LIKE '%{search}%' OR Storages.Name LIKE '%{search}%' OR Storages.Ncard Inventory '%{search}%'";

    var _repairs = AutoMapper.MapDynamic<Repair>(conn.Query($@"SELECT
        Repairs.*

        ,Devices.Id          AS Device_Id
        ,Devices.Inventory   AS Device_Inventory
        ,Devices.Name        AS Device_Name
        ,Devices.Description AS Device_Description
        ,Devices.Type        AS Device_Type

        ,Storages.Inventory AS Storage_Inventory
        ,Storages.Name      AS Storage_Name
        ,Storages.Nall      AS Storage_Nall
        ,Storages.Nstorage  AS Storage_Nstorage
        ,Storages.Nrepairs  AS Storage_Nrepairs
        ,Storages.Noff      AS Storage_Noff
        ,Storages.Cost      AS Storage_Cost
    FROM Repairs
    LEFT OUTER JOIN Devices   ON Repairs.DeviceId         = Devices.Id
    LEFT OUTER JOIN Storages  ON Repairs.StorageInventory = Storages.Inventory
    {where}
    ORDER BY Repairs.FolderId, Repairs.WriteoffId, Repairs.Date DESC")).AsList();

    if (!string.IsNullOrEmpty(search))
    {
        <div class='unit'>
            <table class='caption'>
                <tr>
                    <th>Поиск совпадений по запросу: @search</th>
                </tr>
            </table>
            @RenderItems(_repairs)
        </div>
    }
    else
    {
        var _writeoffs = conn.Query<Writeoff>(@"SELECT
            Writeoffs.Id
            ,Writeoffs.Name
            ,Writeoffs.Date
            ,c.O_Name    AS [Type]
            ,Folders.Id  AS [FolderId]
        FROM Writeoffs
        LEFT OUTER JOIN catalog_writeoffs c ON Writeoffs.Type = c.O_Alias
        LEFT OUTER JOIN Folders ON Writeoffs.FolderId = Folders.Id
        ORDER BY Writeoffs.Date DESC").AsList();

        var _folders = conn.Query<Folder>(@"SELECT
            f.Id,
            CASE WHEN p.Id IS NULL THEN 0 ELSE p.Id END AS FolderId,
            f.Name
        FROM Folders f
        LEFT OUTER JOIN Folders p ON f.FolderId = p.Id
        WHERE f.Type = 'repair'
        ORDER BY f.Name").AsList();

        var repairs = new List<Repair>();
        var writeoffs = new List<Writeoff>();
        var folders = new List<Folder>();
        bool found;

        foreach (var repair in _repairs)
        {
            found = false;
            foreach (var writeoff in _writeoffs)
            {
                if (repair.WriteoffId == writeoff.Id)
                {
                    writeoff.Repairs.Add(repair);
                    found = true;
                    break;
                }
            }

            if (!found)
            {
                foreach (var folder in _folders)
                {
                    if (repair.FolderId == folder.Id)
                    {
                        folder.Repairs.Add(repair);
                        found = true;
                        break;
                    }
                }

                if (!found)
                {
                    repairs.Add(repair);
                }
            }
        }

        foreach (var writeoff in _writeoffs)
        {
            found = false;
            foreach (var folder in _folders)
            {
                if (writeoff.FolderId == folder.Id)
                {
                    folder.Writeoffs.Add(writeoff);
                    found = true;
                    break;
                }
            }

            if (!found)
            {
                writeoffs.Add(writeoff);
            }
        }

        foreach (var folder in _folders)
        {
            if (folder.FolderId == 0)
            {
                folders.Add(Folder.Build(folder, _folders));
            }
        }


        <div class="unit" id="solo">
            <table class="caption">
                <tr>
                    <td width="24px"><div class="icon ic-cached"></div></td>
                    <th>Не распределенные ремонты</th>
                </tr>
            </table>
            @RenderItems(repairs)
        </div>

        foreach (var writeoff in writeoffs)
        {
            @RenderWriteoff(writeoff)
        }

        foreach (var folder in folders)
        {
            @RenderFolder(folder)
        }
    }
}

@helper RenderFolder(Folder folder)
{
    string id = "rg" + folder.Id;
    string open = Request.Cookies.Get(id)?.Value ?? "";

    <div class="unit group @open" id="@id">
        <table class='caption'>
            <tr>
                <td width='24px' menu='group' onmousedown='_menu(this)'>
                    <div class='icon ic-folder'></div>
                </td>
                <th>@folder.Name</th>
            </tr>
        </table>
        <div class="items_block @(open == "open" ? "" : "hide")">
            @foreach (var sub in folder.SubFolders)
            {
                @RenderFolder(sub)
            }
            @foreach (var writeoff in folder.Writeoffs)
            {
                @RenderWriteoff(writeoff)
            }
            @RenderItems(folder.Repairs)
        </div>
    </div>
}

@helper RenderWriteoff(Writeoff writeoff)
{
    string id = "off" + writeoff.Id;
    string open = Request.Cookies.Get(id)?.Value ?? "";

    <div class="unit writeoff @open">
            <table class="caption">
                <tr>
                    <td width="30px">
                        <div class="icon ic-info-outline" menu='computer' onmousedown='_menu(this)'></div>
                    </td>
                    <th>@writeoff.Name</th>
                    <td width="250px">@writeoff.Type</td>
                    <td width="150px">@writeoff.AllCost() р.</td>
                    <td width="70px">@writeoff.Date.ToString("dd.MM.yyyy")</td>
                </tr>
            </table>
            <div class="items_block @(open == "open" ? "" : "hide")">
                <div class='title-wrapper' id='@id'>
                    <div class='title'>Открыть карточку списания</div>
                </div>
                @RenderItems(writeoff.Repairs)
            </div>
        </div>
}

@helper RenderItems(List<Repair> repairs)
{
    if (repairs.Count == 0) { return; }
    <table class="items">
        @RenderHead()
        <tbody>
            @foreach (var repair in repairs)
            {
                <tr id="@repair.Id" class="item">
                    <td><input type="checkbox" class="selecter" /></td>
                    <td>
                        <b>@(repair.Device?.Name)</b> @(repair.Device?.Description)
                    </td>
                    <td>
                        <div class="led @repair.Storage.Led()"></div> @repair.Storage.Name
                    </td>
                    <td>@repair.Number</td>
                    <td>@((repair.Number * repair.Storage.Cost).ToString("0.00")) р.</td>
                    <td><input type="checkbox" disabled @(repair.IsOff ? "checked" : "") /></td>
			        <td><input type="checkbox" disabled @(repair.IsVirtual ? "checked" : "") /></td>
                </tr>
            }
        </tbody>
    </table>
}

@helper RenderHead()
{
    <thead>
        <tr>
            <td width="20px"><input type="checkbox" class="selecter-all" /></td>
            <th data-type="string">объект ремонта</th>
            <th data-type="string" width="460px">деталь</th>
            <th data-type="number" width="50px">кол-во</th>
            <th data-type="number" width="70px">стоимость</th>
            <th data-type="date" width="70px">дата</th>
            <th data-type="string" width="40px">спис.</th>
            <th data-type="string" width="40px">вирт.</th>
        </tr>
    </thead>
}