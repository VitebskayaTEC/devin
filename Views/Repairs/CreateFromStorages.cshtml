@model string
<div class="cart__header">
    <div>Создание ремонтов</div>
    <div class="cart__closeButton" title="Закрыть карточку" onclick="Cart.close()">
        <i class="icon ic-clear icon_white icon_no-hover"></i>
    </div>
</div>

@if (string.IsNullOrEmpty(Model))
{
    <div class="cart__body">Не получен список выбранных элементов</div>
    return;
}

@using (var db = new DevinContext())
{
    var storagesId = Model.Split(',').Select(x => int.TryParse(x, out int i) ? i : 0).ToArray();

    var storages = db.Storages
        .Where(x => storagesId.Contains(x.Id) && x.Nstorage > 0)
        .OrderBy(x => x.Inventory)
        .Select(x => new Storage { Id = x.Id, Inventory = x.Inventory, Name = x.Name, Nstorage = x.Nstorage })
        .ToList();
    
    if (storages.Count == 0)
    {
        <div class="cart__body">Нет элементов для оформления ремонтов</div>
        return;
    }

    var computersRawQuery = from d in db.Devices
                            from c in db.Devices.Where(x => x.Type == "CMP" && x.Id == d.ComputerId).DefaultIfEmpty()
                            where !d.IsDeleted && !d.IsOff && (
                               d.Type != "CMP" || (
                                   d.Type == "CMP" && !db.Devices.Where(x => x.ComputerId != 0).Select(x => x.ComputerId).Contains(d.Id)
                               )
                            )
                            orderby c.Name, d.Name
                            select new {
                                c = new { c.Id, c.Name, c.PublicName },
                                d = new { d.Id, d.Name, d.PublicName }
                            };

    var computersRaw = computersRawQuery.ToList();

    var computersQuery = from raw in computersRaw
                         group raw by raw.c into g
                         select new Computer
                         {
                             Id = g.Key.Id,
                             Name = g.Key.Name,
                             PublicName = g.Key.PublicName,
                             Devices = g.Select(x => new Device { Id = x.d.Id, Name = x.d.Name, PublicName = x.d.PublicName }).AsList()
                         };

    var computers = computersQuery.ToList();

    string select = "<select class=\"computers cart__field\"><option value=\"0\">? Не выбрано</option>";
    foreach (var computer in computers)
    {
        if (computer.Id == 0)
        {
            select += "<optgroup label=\"Устройства, расположенные отдельно\">";
        }
        else
        {
            select += "<optgroup label=\"" + computer.Name + "\">"
                + "<option value=\"" + computer.Id + "\">[компьютер] " + computer.Name + " | " + computer.PublicName + "</option>";
        }

        foreach (var device in computer.Devices)
        {
            select += "<option value=\"" + device.Id + "\">" + device.Name + " | " + device.PublicName + "</option>";
        }

        select += "</optgroup>";
    }
    select += "</select>";

    <div class="cart__body cart__body_expanded">
        <table class="repairs__table">
            <thead>
                <tr>
                    <th>позиция</th>
                    <th width="400px">на какое устройство</th>
                    <th width="100px">кол-во</th>
                    <th width="50px">вирт.</th>
                </tr>
            </thead>
            <tbody id="repairsData">
                @foreach (var storage in storages)
                {
                    <tr class="repairs__row" data-id="@storage.Id">
                        <td>
                            <button class="cart__button" onclick="Repairs.Storage.add(this)"><i class="icon ic-content-copy icon_no-hover"></i></button>
                            <button class="cart__button" onclick="Repairs.Storage.remove(this)"><i class="icon ic-clear icon_no-hover"></i></button> 
                            <b>@storage.Inventory</b> @storage.Name [<b>@storage.Nstorage</b> шт.]
                        </td>
                        <td class="computers-container">
                            @Html.Raw(select)
                        </td>
                        <td>
                            <input class="cart__field" type="number" value="0" />
                        </td>
                        <td>
                            <input type="checkbox" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="cart__menu">
        <button class="cart__button" onclick="Repairs.Storage.end()">Подтвердить</button>
        <button class="cart__button" onclick="Repairs.Storage.end(true)">Подтвердить и сгруппировать в списание</button>
        <button class="cart__button" onclick="Repairs.Storage.back()">Отмена</button>
    </div>
}