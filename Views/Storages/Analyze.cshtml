@{
    ViewBag.Title = "DEVIN | Расход картриджей";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var cartridges = new List<Cartridge>();
}

@section scripts {
    <script>
        function unique(rowA, rowB, way, colNum) {
	        if (way == "up") {
		        return rowA.cells[colNum].querySelector("a").innerHTML > rowB.cells[colNum].querySelector("a").innerHTML ? 1 : -1;
	        } else {
		        return rowB.cells[colNum].querySelector("a").innerHTML > rowA.cells[colNum].querySelector("a").innerHTML ? 1 : -1;
	        }
        };

        function exportToExcel() {

            let formData = '';

	        let rows = document.getElementById('analyzeCartridges').getElementsByTagName('tbody')[1].getElementsByTagName('tr');
            for (let i = 0; i < rows.length; i++) {

                let input = rows[i].querySelector('input');
                let val = +input.value;

                if (val > 0 && !isNaN(val)) {
                    formData += (formData == '' ? '' : '----') + input.getAttribute('cartridge') + '|' + val.toFixed(0); //4
		        }
            }

            let form = new FormData();
            form.append('data', formData);
            fetch(host + 'storages/analyzePrint', { method: 'POST', body: form })
                .then(res => res.json())
                .then(json => {
                    if (json.Good) {
                        message(json.Good, 'good');
                        let a = document.createElement('a');
                        document.body.appendChild(a);
                        a.href = json.Link;
                        a.click();
                    }
                });
        }
    </script>
}

@using (var db = new DevinContext())
{
    int minBaseValue = 23;

    var cartridgesQuery = from c in db.Cartridges
                          from s in db.Storages.Where(x => x.CartridgeId == c.Id).DefaultIfEmpty()
                          orderby c.Type, c.Name
                          select new
                          {
                              Cartridge = c.Id,
                              Type = c.Type,
                              Caption = c.Name,
                              DefPrice = c.Cost,
                              Count = s.Nstorage,
                              Account = s.Account,
                              Price = s.Cost,
                              ID = s.CartridgeId,
                              AltType = c.Type,
                              Color = c.Color
                          };

    var rs = cartridgesQuery.ToList();

    var cartridge = new Cartridge { Id = 0 };

    foreach (var row in rs)
    {
        float cost;
        if (row.Price == 0)
        {
            cost = minBaseValue * 1.2F;
        }
        else
        {
            float fixCost = row.Account == "10.5.1" ? 1.2F : 2.4F;
            cost = Convert.ToSingle(row.Price * fixCost);
        }

        if (cartridge.Id == row.Cartridge)
        {
            cartridge.InStorage += row.Count;

            if (cartridge.DefPrice != 0 && cartridge.Cost < cost)
            {
                cartridge.Cost = cost;
            }
        }
        else
        {
            cartridges.Add(cartridge = new Cartridge
            {
                Id = row.Cartridge,
                Name = row.Caption,
                InStorage = row.Count,
                Count = 0,
                Type = row.Type,
                Color = row.Color,
                DefPrice = row.DefPrice,
                Cost = row.DefPrice == 0F ? cost : row.DefPrice
            });
        }
    }

    var repairsQuery = from r in db.Repairs
                       from d in db.Devices.Where(x => x.Id == r.DeviceId)
                       from C in db.Devices.Where(x => x.Type == "CMP" && d.ComputerId == x.Id)
                       from s in db.Storages.Where(x => x.Id == r.StorageId)
                       from p in db.Printers.Where(x => x.Id == d.PrinterId)
                       from c in db.Cartridges.Where(x => x.Id == s.CartridgeId)
                       where d.Type == "PRN" && !r.IsVirtual
                       orderby d.Id, s.CartridgeId, r.Date
                       select new
                       {
                           ID_P = d.Id,
                           ID_C = s.CartridgeId,
                           Computer = C.Name,
                           Device = d.PublicName,
                           Printer = p.Name,
                           Date = r.Date,
                           N = r.Number,
                           Cartridge = c.Name,
                           Price = s.Cost,
                           Account = s.Account
                       };

    var repairs = repairsQuery.ToList();

    var buffer = new List<dynamic>();
    int activePrinter = 0;
    int activeCartridge = 0;

    <button class="cart__button" onclick="exportToExcel()">Печать заказа на закупку картриджей</button>

    <div class="unit" id="analyzeRepairs">
        <table class="caption">
            <tr>
                <th width="50px"><i class="icon ic-code"></i></th>
                <td><b>Данные по ремонтам</b></td>
            </tr>
        </table>
        <div class="itemsBlock">
            <table class="items">
                <thead>
                    <tr>
                        <th>Компьютер</th>
                        <th>Устройство</th>
                        <th>Тип устройства</th>
                        <th>Дата</th>
                        <th>Кол-во</th>
                        <th>Тип картриджа</th>
                        <th>Стоимость, шт</th>
                        <th>Счет учета</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var row in repairs)
                    {
                        if (row.ID_P != activePrinter || row.ID_C != activeCartridge)
                        {
                            if (activePrinter != 0)
                            {
                                <tr>
                                    <th colspan="8">
                                        @Html.Raw(Analyzer())
                                    </th>
                                </tr>
                            }

                            activePrinter = row.ID_P;
                            activeCartridge = row.ID_C;

                            buffer.Clear();
                        }

                        buffer.Add(row);

                        <tr>
                            <td>@row.Computer</td>
                            <td>@row.Device</td>
                            <td>@row.Printer</td>
                            <td>@row.Date</td>
                            <td>@row.N</td>
                            <td>@row.Cartridge</td>
                            <td>@row.Price</td>
                            <td>@row.Account</td>
                        </tr>
                    }
                    <tr>
                        <th colspan="8">
                            @Html.Raw(Analyzer())
                        </th>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <div class="unit open" id="analyzeCartridges">
        <table class="caption">
            <tr>
                <th width="50px"><i class="icon ic-code"></i></th>
                <td><b>Прогноз закупки картриджей</b></td>
            </tr>
        </table>
        <div class="itemsBlock itemsBlock_expanded">
            <table class="items">
                <thead>
                    <tr>
                        <th data-type="string">Тип картриджа</th>
                        <th data-type="unique">Наименование картриджа</th>
                        <th data-type="string">Стоимость</th>
                        <th data-type="number">На складе</th>
                        <th data-type="string">Прогноз</th>
                        <th data-type="none" width="60px">Итог</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var c in cartridges.OrderBy(x => x.Name))
                    {
                        int forecast = 0;
                        <tr>
                            <td>@c.Type</td>
                            <td><a class="view__link" href="##cart@(c.Id)">@c.Name</a></td>
                            <td>@c.Cost.ToString("0.00")</td>
                            <td>@c.InStorage</td>
                            <td>
                                @if (c.Count > 0)
                                {
                                    forecast = c.Count - c.InStorage;
                                    if (forecast > 0)
                                    {
                                        @: Предлагается заказать @forecast шт.
                                    }
                                    else if (c.InStorage == 0)
                                    {
                                        @: Предлагается заказать 1 картридж для наличия резерва (замены не планируются)
                                    }
                                    else
                                    {
                                        forecast = 0;
                                        @: Заказ картриджей не требуется
                                    }
                                }
                                else if (c.InStorage == 0)
                                {
                                    forecast = 1;
                                    @: Предлагается заказать 1 картридж для наличия резерва (не проведено ни одного ремонта)
                                }
                                else
                                {
                                    forecast = 0;
                                    @: Замены картриджей не проводились
                                }
                            </td>
                            <td>
                                <input class="cart__field" cartridge="@c.Name|@c.Color|@c.Type|@c.Cost" type="number" min="0" onblur="this.value = Math.round(this.value);" value="@forecast" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    string Analyzer()
    {
        int limit = 90;
        int forecast = 0;
        string s = "";

        if (buffer.Count == 1)
        {
            DateTime lastDate = buffer[0].Date;
            int differenceDate = (DateTime.Now - lastDate).Days;

            if (differenceDate > limit)
            {
                forecast = 1;
                s = "<br/>Недостаточно данных. Предполагается <b>1</b> замена (последняя замена была более [" + limit + "] дней назад)<hr />";
            }
            else
            {
                s = "<br/>Недостаточно данных. Замены не предполагаются<hr />";
            }
        }
        else
        {
            DateTime firstDate = buffer.First().Date;
            DateTime lastDate = buffer.Last().Date;
            int differenceDate = (DateTime.Now - firstDate).Days;
            int leftDate = (DateTime.Now - lastDate).Days;

            double amount = 0;
            foreach (var x in buffer) { amount += x.N; }
            double rate = Math.Ceiling(differenceDate / amount);

            forecast = (int)Math.Ceiling(limit / rate);

            s = "<br />Количество дней между первым и последним ремонтами: <b>" + differenceDate + "</b>" +
                "<br/>Промежуток между заменами, дней: <b>" + rate + "</b>" +
                "<br/>Дней с последнего ремонта: <b>" + leftDate + "</b>" +
                "<br/>Предполагаемые замены: <b>" + forecast + "</b><hr />";
        }

        foreach (var c in cartridges)
        {
            if (c.Id == activeCartridge)
            {
                c.Count += forecast;
                break;
            }
        }

        return s;
    }
}